Builder pattern is a creational design pattern it means its solves problem related to object creation.
Constructors in Java are used to create object and can take parameters required to create object. 
Problem starts when an Object can be created with lot of parameters, some of them may be mandatory and others may be optional.
Consider a class which is used to create Cake, now you need number of item like egg, milk, flour to create cake. 
many of them are mandatory and some  of them are optional like cherry, fruits etc. 
If we are going to have overloaded constructor for different kind of cake then there will be many constructor and even worst 
they will accept many parameter.

Guidelines for Builder design pattern in Java
1) Make a static nested class called Builder inside the class whose object will be build by Builder. In this example its Cake.

2) Builder class will have exactly same set of fields as original class.
3) Builder class will expose method for adding ingredients e.g. sugar() in this example. each method will return same Builder object. Builder will be enriched with each method call.

4) Builder.build() method will copy all builder field values into actual class and return object of Item class.
5) Item class (class for which we are creating Builder) should have private constructor to create its object from build() method and prevent outsider to access its constructor.


